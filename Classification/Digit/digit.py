# -*- coding: utf-8 -*-
"""Digit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dvXl-0SEaKf94_PsaMeRd5wqHlh4D5cD
"""

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext autoreload
# %autoreload 2
# %matplotlib inline

from fastai.vision import *
from PIL import Image

import zipfile
with zipfile.ZipFile('/content/digit-recognizer.zip') as f:
    f.extractall('/content/digit')

path = Path('/content/digit')
(path/'data').mkdir(exist_ok =True)

df=pd.read_csv(path/'train.csv')
df_test = pd.read_csv(path/'test.csv')

df.head()

path_tr = path/'data/Train'
path_tr.mkdir(exist_ok = True)
labels = df.loc[:,'label']
for label in np.unique(labels):
    (path_tr/str(label)).mkdir(exist_ok=True)
path_test = path/'data/Test'
path_test.mkdir(exist_ok = True)

from PIL import Image

def save_img(data,path_img):
    data = data.reshape(28,28)
    data = data.astype(np.uint8)
    img = Image.fromarray(data)
    img.save(path_img)

for idx,row in df.iterrows():
    label, data = row[0],row[1:]
    
    folder = path_tr/str(label)
    filename = f"{idx}.jpg"
    path_img = folder/filename
    
    data = data.values
    
    save_img(data, path_img)

for idx,row in df_test.iterrows():
    data = row[0:]
    
    folder = path_test
    filename = f"{idx}.jpg"
    path_img = folder/filename
    
    data = data.values
    
    save_img(data, path_img)

"""Loading into Databunch"""

src = ImageList.from_folder(path_tr).split_by_rand_pct(0.2).label_from_folder()

def get_data(size=28):
    tfms = ([*rand_pad(padding=3, size=size, mode='zeros')], [])
    return src.transform(tfms).add_test_folder(path_test).databunch(bs = 48).normalize(imagenet_stats)

src

data = get_data()

data.show_batch(3,figsize=(5,5))

"""Data augmentation"""

def _plot(i,j,ax): data.train_ds[0][0].show(ax, cmap='gray')
plot_multi(_plot, 3, 3, figsize=(8,8))

learn = cnn_learner(data,models.resnet18,metrics=accuracy)

learn.lr_find()
learn.recorder.plot(skip_end =15)

learn.fit_one_cycle(4,2e-02)

learn.unfreeze()
learn.lr_find()
learn.recorder.plot()

learn.fit_one_cycle(4,1e-06)

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_top_losses(9,figsize=(8,8))

score,_ = learn.get_preds(DatasetType.Test)

score.shape,

score[1]

preds = np.argmax(score,axis=1)
preds.shape

preds[1]

submission = pd.DataFrame()

submission_1 = pd.DataFrame(preds)

submission_1.to_csv(Path('/content/submission.csv'))

learn  = cnn_learner(data,models.resnet34,metrics=accuracy)

learn.lr_find()
learn.recorder.plot(skip_end =15)

learn.fit_one_cycle(6,3e-02)

